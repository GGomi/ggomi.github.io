<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jeongmin&#39;s Blog</title>
  
  <subtitle>Tech &amp; Note</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ggomi.github.io/"/>
  <updated>2018-12-13T13:37:19.205Z</updated>
  <id>https://ggomi.github.io/</id>
  
  <author>
    <name>Jeongmin Oh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>개발자 기초 다지기 - 1</title>
    <link href="https://ggomi.github.io/basic-1/"/>
    <id>https://ggomi.github.io/basic-1/</id>
    <published>2018-12-12T02:18:26.542Z</published>
    <updated>2018-12-13T13:37:19.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="기초-개발상식-및-개념들-1"><a href="#기초-개발상식-및-개념들-1" class="headerlink" title="기초 개발상식 및 개념들 - 1"></a>기초 개발상식 및 개념들 - 1</h2><hr><p><img src="images/basic1.png" alt="기초개발상식"></p><h2 id="1-OOP-객체지향프로그래밍"><a href="#1-OOP-객체지향프로그래밍" class="headerlink" title="1. OOP(객체지향프로그래밍)"></a>1. OOP(객체지향프로그래밍)</h2><ul><li><p><code>OOP</code> 란 인간중심적 프로그래밍 패러다임이라고 할 수 있다.</p></li><li><p><code>OOP</code>로 작성한 코드는 재사용성이 높다.</p></li><li><p>소프트웨어의 가치는 변화이다.</p></li><li><p>이전처럼 잘동작하게 하는 것이 유지보수가 아니다. 변화를 주어서 계속 유용하게 하는 작업이 유지보수이다. <em>Jessica Kerr</em></p></li></ul><hr><blockquote><h3 id="1-1-객체지향과-절차지향-프로그래밍-비교"><a href="#1-1-객체지향과-절차지향-프로그래밍-비교" class="headerlink" title="1.1 객체지향과 절차지향 프로그래밍 비교"></a>1.1 객체지향과 절차지향 프로그래밍 비교</h3><ul><li><strong>절차지향</strong><ul><li>일단 쉽다. 하지만 시간이 갈수록 이런 데이터를 공유하는 방식은 변화가 필요할 때 수정을 복잡하게 만든다</li><li>요구사항이 늘어갈수록 소스의 복잡도는 올라가고, 수정해야할 코드는 늘어간다.</li></ul></li><li><strong>객체지향</strong><ul><li>객체는 데이터와 프로시저로 구성된다.</li><li>절차지향에 비해서 처음 프로젝트를 시작할 때 어려울 수 있다. </li><li>데이터와 프로시저를 알맞게 작성하고, 나누어야하는 부분에서 어려울 수 있다.</li><li><strong>객체의 핵심 == 기능 제공</strong></li></ul></li></ul></blockquote><hr><h2 id="2-캡슐화"><a href="#2-캡슐화" class="headerlink" title="2. 캡슐화"></a>2. 캡슐화</h2><ul><li>데이터 + 관련 기능 묶기</li><li>캡슐화를 통해 기능을 사용하는 코드에 영향을 주지 않고 내부구현을 변경할 수 있는 유연함.</li><li>정보은닉 의미를 포함한다.</li><li>객체가 기능을 어떻게 구현했는지 외부에 감추는 것</li><li>외부에 영향없이 객체 내부 구현 변경가능</li><li>기능에 대한 이해를 높인다.(의도를 파악하는데 도움을 준다.)</li></ul><hr><blockquote><h3 id="2-1-캡슐화를-위한-규칙"><a href="#2-1-캡슐화를-위한-규칙" class="headerlink" title="2.1 캡슐화를 위한 규칙"></a>2.1 캡슐화를 위한 규칙</h3><ul><li><strong>1. Tell, Don’t Ask</strong> =&gt; <ul><li><code>데이터</code>를 달라 하지말고 처리해서 결과만 줘!</li></ul></li><li><strong>2. Demeter’s Law</strong> =&gt;<ul><li>Method에서 생성한 객체의 <code>Method</code>만 호출</li><li>파라미터로 받은 객체의 <code>Method</code>만 호출</li><li>필드로 참조하는 객체의 <code>Method</code>만 호출</li></ul></li></ul></blockquote><hr><h2 id="3-다형성"><a href="#3-다형성" class="headerlink" title="3. 다형성"></a>3. 다형성</h2><ul><li>한 객체가 여러타입을 갖는 것<blockquote><ul><li>즉 한 객체가 여러타입의 기능을 제공 </li><li>타입상속으로 다형성을 구현</li></ul></blockquote></li></ul><h2 id="추상화"><a href="#추상화" class="headerlink" title="추상화"></a>추상화</h2><pre><code>- 데이터나 프로세스 등을 의미가 비슷한 개념이나 의미있는 표현으로 정의하는 과정- 아직 존재하지않는 기능에 대한 이른 추상화는 주의- 실제 변경, 확장이 발생할 때 추상화 시도하는 것이 좋다.- 구현을 한 이유가 무엇 때문인지 정확하게 알고, 생각해야함.- **타입 추상화**    - 여러구현 클래스를 대표하는 상위타입도출    - 추상타입을 사용하면 코드의 유연함을 가져올 수 있다.</code></pre><hr><h2 id="2-객체-지향적-설계-5대-원칙-S-O-L-I-D"><a href="#2-객체-지향적-설계-5대-원칙-S-O-L-I-D" class="headerlink" title="2. 객체 지향적 설계 5대 원칙(S.O.L.I.D)"></a>2. 객체 지향적 설계 5대 원칙(S.O.L.I.D)</h2><ul><li><p><strong>SRP(Single Responsibility Principle)</strong> : 단일 책임 원칙</p><ul><li><p>클래스는 단 하나의 책임을 져야하며 클래스를 변경하는 이유는 단 하나의 이유여야 한다.</p></li><li><p>이 규칙만 잘지켜도 클래스 구성도가 깔끔하게 정리될 것.</p></li><li><p><strong>Divergent Change</strong>, <strong>Shotgun Surgery</strong> (참고)</p></li><li><p><strong>지켜지지않은 예시</strong></p><ul><li>변수레벨<ul><li>하나의 속성이 여러의미를 갖는 경우</li><li>어떤 곳에서는 쓰고, 어떤곳에선 쓰지않은 속성이 있는 경우</li></ul></li><li>Method 레벨<ul><li>분기처리를 위한 <strong>if문</strong>이 많을 경우</li></ul></li></ul></li></ul></li><li><p><strong>OCP(Open-Closed Principle)</strong> : 개방-폐쇄 원칙</p><ul><li><p>확장에는 열려 있어야하고, 변경에는 닫혀있어야한다.??</p></li><li><p>자신을 확장시키는 것에는 열려있고, 주변의 변화에 대해서는 닫혀있어야한다.</p></li></ul></li><li><p><strong>LSP(Liskov Substitution Principle)</strong> : 리스코프 치환 원칙</p><ul><li>상위 타입의 객체를 하위 타입의 객체로 치환해도 상위 타입을 사용하는 프로그램을 정상적으로 동작해야한다.??</li></ul></li><li><p><strong>ISP(Interface Segregation Principle)</strong> : 인터페이스 분리 원칙</p><ul><li><p>인터페이스는 그 인터페이스를 사용하는 클라이언트를 기준으로 분리해야한다.??</p></li><li><p>한 클래스는 자신이 사용하지 않는 인터페이스는 구현하지 말아야한다.</p><ul><li>SRP가 클래스의 단일 책임을 강조한다면, ISP는 인터페이스의 단일 책임을 강조한다.</li></ul></li></ul></li><li><p><strong>DIP(Dependency Inversion Principle)</strong> : 의존 역전 원칙</p><ul><li>고수준 모듈은 저수준 모듈의 구현에 <strong>의존</strong>해서는 안된다.??</li></ul></li></ul><h3 id="이-원칙들은-객체간의-응집도는-높이고-결합도는-낮추자는-원칙을-재정립한-것이다"><a href="#이-원칙들은-객체간의-응집도는-높이고-결합도는-낮추자는-원칙을-재정립한-것이다" class="headerlink" title="이 원칙들은 객체간의 응집도는 높이고, 결합도는 낮추자는 원칙을 재정립한 것이다."></a>이 원칙들은 객체간의 응집도는 높이고, 결합도는 낮추자는 원칙을 재정립한 것이다.</h3><hr><ul><li><p>출처: Inflearn <a href="https://www.inflearn.com/course/%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%9E%85%EB%AC%B8/" rel="external nofollow noopener noreferrer" target="_blank"> 객체 지향 프로그래밍 입문 </a> 강의</p></li><li><p><a href="https://velog.io/@essri/%EA%B8%B0%EC%B4%88-%EA%B0%9C%EB%B0%9C%EC%83%81%EC%8B%9D-%EB%B0%8F-%EA%B0%9C%EB%85%90%EB%93%A4-1-" rel="external nofollow noopener noreferrer" target="_blank">velog</a></p></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;기초-개발상식-및-개념들-1&quot;&gt;&lt;a href=&quot;#기초-개발상식-및-개념들-1&quot; class=&quot;headerlink&quot; title=&quot;기초 개발상식 및 개념들 - 1&quot;&gt;&lt;/a&gt;기초 개발상식 및 개념들 - 1&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;img src=
      
    
    </summary>
    
      <category term="Basic_sense" scheme="https://ggomi.github.io/categories/Basic-sense/"/>
    
    
      <category term="개발자 기초다지기_1" scheme="https://ggomi.github.io/tags/%EA%B0%9C%EB%B0%9C%EC%9E%90-%EA%B8%B0%EC%B4%88%EB%8B%A4%EC%A7%80%EA%B8%B0-1/"/>
    
  </entry>
  
  <entry>
    <title>기초 다지기 - 0</title>
    <link href="https://ggomi.github.io/basic-0/"/>
    <id>https://ggomi.github.io/basic-0/</id>
    <published>2018-12-11T23:58:33.117Z</published>
    <updated>2018-12-12T06:37:11.911Z</updated>
    
    <content type="html"><![CDATA[<h2 id="기초다지기"><a href="#기초다지기" class="headerlink" title="기초다지기!!"></a>기초다지기!!</h2><ul><li>졸업이 두달 정도 남은 상황이다. 취업을 앞두고, 해왔던 것들에 대해서 회의감이 들어서 지금까지 해왔던 공부들을 복습하고, 기초를 다시 다져보려고한다.</li></ul><hr><blockquote></blockquote><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ol><li>기초 개발상식 및 개념들</li><li>자료구조</li><li>데이터베이스(RDBS)</li><li>운영체제</li><li>중요 알고리즘 공부</li><li>네트워크</li></ol><ul><li>위의 순서대로 공부를 시작할 생각이고, <strong>‘최소한 이정도는 알아야한다.’</strong> 하는 그 최소한을 공부하면서 계획을 진행할 예정이다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;기초다지기&quot;&gt;&lt;a href=&quot;#기초다지기&quot; class=&quot;headerlink&quot; title=&quot;기초다지기!!&quot;&gt;&lt;/a&gt;기초다지기!!&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;졸업이 두달 정도 남은 상황이다. 취업을 앞두고, 해왔던 것들에 대해서 회의감이 들어서
      
    
    </summary>
    
      <category term="Basic_sense" scheme="https://ggomi.github.io/categories/Basic-sense/"/>
    
    
      <category term="OOP" scheme="https://ggomi.github.io/tags/OOP/"/>
    
      <category term="객체지향프로그래밍" scheme="https://ggomi.github.io/tags/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"/>
    
      <category term="취업준비" scheme="https://ggomi.github.io/tags/%EC%B7%A8%EC%97%85%EC%A4%80%EB%B9%84/"/>
    
      <category term="기초다지기_0" scheme="https://ggomi.github.io/tags/%EA%B8%B0%EC%B4%88%EB%8B%A4%EC%A7%80%EA%B8%B0-0/"/>
    
  </entry>
  
</feed>
